version: 2.1

commands:
    destroy-environment:
        description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
        steps:
            - run:
                name: Destroy environments
                when: on_fail
                command: |
                    echo "Destroying environment: ${CIRCLE_WORKFLOW_ID:0:7} "
                    aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
                    aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
    revert-migrations:
        description: Revert the last migration
        steps:
            - run:
                name: Revert migrations
                when: on_fail
                command: |
                    SUCCESS=$(curl --insecure  https://kvdb.io/NMLDwBvMsDdGaz8tvc99YC/migration_${CIRCLE_WORKFLOW_ID:0:7})
                    if (( $SUCCESS == 1 ));
                    then
                        cd ~/project/backend
                        npm install
                        npm run migration:revert
                    fi  

jobs:
    build-frontend:
        docker:
            - image: circleci/node:13.8.0
        steps:
            - checkout
            - run:
                name: Build front-end
                command: |
                    cd frontend
                    npm install
                    npm run build
            - save_cache:
                paths: [ frontend/node_modules ]
                key: frontend-build
    build-backend:
        docker:
            - image: circleci/node:13.8.0
        steps:
            - checkout
            - run:
                name: Back-end build
                command: |
                    cd backend
                    npm install
                    npm run build
            - save_cache:
                paths: [ backend/node_modules ]
                key: backend-build
    test-frontend:
        docker:
            - image: circleci/node:13.8.0
        steps:
            - checkout
            - restore_cache:
                keys: [ test-frontend-build ]
            - run:
                name: Front-end test
                command: |
                    cd frontend
                    npm install
                    npm run test
            - save_cache:
                paths: [frontend/node_modules]
                key: test-frontend-build

    test-backend:
        docker:
            - image: circleci/node:13.8.0
        steps:
            - checkout
            - restore_cache:
                keys: [ test-backend-build ]
            - run:
                name: Back-end test
                command: |
                    cd backend
                    npm install
                    npm run test
            - save_cache:
                paths: [ backend/node_modules ]
                key: test-backend-build

    scan-frontend:
        docker:
            - image: circleci/node:13.8.0
        steps:
            - checkout
            - restore_cache:
                keys: [ scan-frontend-build ]
            - run:
                name: Front-end scan
                command: |
                    cd frontend
                    npm install
                    # npm install oauth-sign@^0.9.0
                    npm audit fix --audit-level=critical --force
                    npm audit --audit-level=critical
            - save_cache:
                paths: [ frontend/node_modules ]
                key: scan-frontend-build

    scan-backend:
        docker:
            - image: circleci/node:13.8.0
        steps:
            - checkout
            - restore_cache:
                keys: [ scan-backend-build ]
            - run:
                name: Back-end scan
                command: |
                    cd backend
                    npm install
                    # npm install oauth-sign@^0.9.0
                    npm audit fix --audit-level=critical --force
                    npm audit fix --force
                    npm audit --audit-level=critical
            - save_cache:
                paths: [ backend/node_modules ]
                key: scan-backend-build

    deploy-infrastructure:
        docker:
            - image: amazon/aws-cli
        steps:
            - checkout
            - run:
                name: Installing tar and gzip
                command: |
                    yum -y install tar gzip
            - run:
                name: Ensure back-end infrastructure exists
                command: |
                    aws cloudformation deploy \
                    --template-file .circleci/files/backend.yml \
                    --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                    --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
                    --tags project=udapeople
            - run:
                name: Ensure front-end infrastructure exist
                command: |
                    aws cloudformation deploy \
                    --template-file .circleci/files/frontend.yml \
                    --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
                    --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
                    --tags project=udapeople
            - run:
                name: Add back-end ip to ansible inventory
                command: |
                    aws ec2 describe-instances \
                    --query 'Reservations[*].Instances[*].PublicIpAddress' \
                    --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                    --output text >> .circleci/ansible/inventory.txt
            - persist_to_workspace:
                root: ~/
                paths:
                    - project/.circleci/ansible/inventory.txt
    configure-infrastructure:
        docker:
            - image: python:3.7-alpine3.11
        steps:
            - checkout
            - add_ssh_keys:
                fingerprints: ["19:6b:b6:9c:54:73:b8:6d:e8:b7:49:c0:fe:ba:20:ea"]
            - attach_workspace:
                at: ~/
            - run:
                name: Install dependencies
                command: |
                    apk add --update ansible
            - run:
                name: Configure server
                command: |
                    cat .circleci/ansible/inventory.txt
                    ansible-playbook -i .circleci/ansible/inventory.txt .circleci/ansible/configure-server.yml

    run-migrations:
        docker:
            - image: circleci/node:13.8.0
        steps:
            - checkout
            - run:
                name: Run migrations
                command: |
                    cd backend
                    npm install
                    npm run migrations > migrations_dump.txt
            - run:
                name: Send migration results to kvdb.io
                command: |
                    if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
                    then
                        curl --insecure https://kvdb.io/NMLDwBvMsDdGaz8tvc99YC/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
                    fi
    deploy-frontend:
        docker:
            - image: python:3.7-alpine3.11
        steps:
            - checkout
            - run:
                name: Install dependencies
                command: |
                    apk add --no-cache curl
                    apk add --no-cache --upgrade bash
                    apk add --no-cache --update npm
                    pip3 install awscli
            - run:
                name: Get backend url
                command: |
                    BACKEND_IP=$(aws ec2 describe-instances --filters Name=tag:Name,Values="backend-${CIRCLE_WORKFLOW_ID:0:7}" --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
                    echo ${BACKEND_IP}
                    export API_URL="http://${BACKEND_IP}:3030"
            - run:
                name: Deploy frontend objects
                command: |
                    cd frontend
                    npm install
                    npm run build
                    tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
                    aws s3 cp ./dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            - destroy-environment
            - revert-migrations
    deploy-backend:
        docker:
        - image: python:3.7-alpine3.11
        steps:
            - checkout
            - add_ssh_keys:
                fingerprints: [ "19:6b:b6:9c:54:73:b8:6d:e8:b7:49:c0:fe:ba:20:ea" ]
            - attach_workspace:
                at: ~/
            - run:
                name: Install dependencies
                command: |
                    pip install awscli
                    apk add --update tar gzip ansible nodejs npm
            - run:
                name: Deploy backend
                command: |
                    cd backend
                    npm i
                    npm run build
                    cd ..
                    tar -C backend -czvf artifact.tar.gz .
                    cd .circleci/ansible
                    echo "Contents  of the inventory.txt file is -------"
                    cat inventory.txt
                    ansible-playbook -i inventory.txt deploy-backend.yml
            - destroy-environment
            - revert-migrations
    smoke-test:
        docker:
            - image: python:3.7-alpine3.11
        steps:
            - checkout
            - run:
                name: Install dependencies
                command: |
                    apk add --update curl nodejs npm
                    pip install awscli
            - run:
                name: Backend smoke test.
                command: |
                    BACKEND_IP=$(aws ec2 describe-instances --filters Name=tag:Name,Values="backend-${CIRCLE_WORKFLOW_ID:0:7}" --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
                    echo ${BACKEND_IP}
                    if curl -s http://${BACKEND_IP}:3030/api/status | grep "ok"
                    then
                      echo "Backend Smoke Test Success"
                      exit 0
                    else
                      echo "Backend Smoke Test Failed"
                      exit 1
                    fi
            - run:
                name: Frontend smoke test.
                command: |
                    URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website.us-east-1.amazonaws.com/#/employees"
                    echo ${URL}
                    if curl -s ${URL} | grep "Welcome"
                    then
                      return 0
                    else
                      return 1
                    fi
            - destroy-environment
            - revert-migrations
    cloudfront-update:
        docker:
        - image: python:3.7-alpine3.11
        steps:
            - checkout
            - run:
                name: Install dependencies
                command: |
                    pip install awscli
                    apk add --update ansible curl nodejs npm
                    apk add --no-cache --upgrade bash
            - run:
                name: Update Cloudfront distribution
                command: |
                    OldWorkflowID=$(aws cloudformation list-exports --query "Exports[?Name==\`WorkflowID\`].Value" --no-paginate --output text)
                    echo "${OldWorkflowID}"
                    aws cloudformation deploy \
                      --template-file .circleci/files/cloudfront.yml \
                      --stack-name InitialStack-${OldWorkflowID} \
                      --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
                      --tags project=udapeople
                    echo OldWorkflow ID: "${OldWorkflowID}"
                    echo Current Workflow ID: "${CIRCLE_WORKFLOW_ID:0:7}"
            - destroy-environment
            - revert-migrations
    cleanup:
        docker:
        - image: amazon/aws-cli
        steps:
            - checkout
            - run:
                name: Get old stack workflow id
                command: |
                    # Fetch the Old workflow ID
                    export OldWorkflowID=$(aws cloudformation \
                        list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
                        --no-paginate --output text)
                    export STACKS=$(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
                        --stack-status-filter CREATE_COMPLETE --no-paginate --output text)
                    echo OldWorkflowID: "${OldWorkflowID}"
                    echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"
                    echo Stack names: "${STACKS[@]}"
            - run:
                name: Remove old stacks and files
                command: |
                    if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
                    then
                        aws s3 rm s3://udapeople-${OldWorkflowID} --recursive
                        aws cloudformation delete-stack --stack-name udapeople-fronend-${OldWorkflowID}
                        aws cloudformation delete-stack --stack-name udapeople-backend-${OldWorkflowID}
                        aws cloudformation delete-stack --stack-name udapeople-cloudfront-${OldWorkflowID}
                    fi

workflows:
    default:
        jobs:
            - build-frontend
            - build-backend
            - test-frontend:
                requires: [build-frontend]
            - test-backend:
                requires: [build-backend]
            - scan-frontend:
                requires: [build-frontend]
            - scan-backend:
                requires: [build-backend]
            - deploy-infrastructure:
                requires: [ test-frontend, test-backend, scan-frontend, scan-backend ]
            - configure-infrastructure:
                requires: [ deploy-infrastructure ]
            - run-migrations:
                requires: [ configure-infrastructure ]
            - deploy-frontend:
                requires: [ run-migrations ]
            - deploy-backend:
                requires: [ run-migrations ]
            - smoke-test:
                requires: [ deploy-backend, deploy-frontend ]
            - cloudfront-update:
                requires: [ smoke-test ]
            - cleanup:
                requires: [ cloudfront-update ]