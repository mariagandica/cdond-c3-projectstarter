version: 2.1

commands:
    destroy-environment:
        description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
        parameters:
            workflow_id:
                type: string
        steps:
            - run:
                name: Destroy environments
                when: on_fail
                command: |
                    echo "Destroying environment: <<parameters.workflow_id>> "
                    aws cloudformation delete-stack --stack-name udapeople-backend-<<parameters.workflow_id>> 
                    aws cloudformation delete-stack --stack-name udapeople-frontend-<<parameters.workflow_id>> 



jobs:
    build-frontend:
        docker:
            - image: circleci/node:13.8.0
        steps:
            - checkout
            - run:
                name: Build front-end
                command: |
                    cd frontend
                    npm install
                    npm run build
            - save_cache:
                paths: [ frontend/node_modules ]
                key: frontend-build
    build-backend:
        docker:
            - image: circleci/node:13.8.0
        steps:
            - checkout
            - run:
                name: Back-end build
                command: |
                    cd backend
                    npm install
                    npm run build
            - save_cache:
                paths: [ backend/node_modules ]
                key: backend-build
    test-frontend:
        docker:
            - image: circleci/node:13.8.0
        steps:
            - checkout
            - restore_cache:
                keys: [ test-frontend-build ]
            - run:
                name: Front-end test
                command: |
                    cd frontend
                    npm install
                    npm run test
            - save_cache:
                paths: [frontend/node_modules]
                key: test-frontend-build

    test-backend:
        docker:
            - image: circleci/node:13.8.0
        steps:
            - checkout
            - restore_cache:
                keys: [ test-backend-build ]
            - run:
                name: Back-end test
                command: |
                    cd backend
                    npm install
                    npm run test
            - save_cache:
                paths: [ backend/node_modules ]
                key: test-backend-build

    scan-frontend:
        docker:
            - image: circleci/node:13.8.0
        steps:
            - checkout
            - restore_cache:
                keys: [ scan-frontend-build ]
            - run:
                name: Front-end scan
                command: |
                    cd frontend
                    npm install
                    # npm install oauth-sign@^0.9.0
                    npm audit fix --audit-level=critical --force
                    npm audit --audit-level=critical
            - save_cache:
                paths: [ frontend/node_modules ]
                key: scan-frontend-build

    scan-backend:
        docker:
            - image: circleci/node:13.8.0
        steps:
            - checkout
            - restore_cache:
                keys: [ scan-backend-build ]
            - run:
                name: Back-end scan
                command: |
                    cd backend
                    npm install
                    # npm install oauth-sign@^0.9.0
                    npm audit fix --audit-level=critical --force
                    npm audit fix --force
                    npm audit --audit-level=critical
            - save_cache:
                paths: [ backend/node_modules ]
                key: scan-backend-build

    deploy-infrastructure:
        docker:
            - image: amazon/aws-cli
        steps:
            - checkout
            - run:
                name: Installing tar and gzip
                command: |
                    yum -y install tar gzip
            - run:
                name: Ensure back-end infrastructure exists
                command: |
                    aws cloudformation deploy \
                    --template-file .circleci/files/backend.yml \
                    --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                    --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
                    --tags project=udapeople
            - run:
                name: Ensure front-end infrastructure exist
                command: |
                    aws cloudformation deploy \
                    --template-file .circleci/files/frontend.yml \
                    --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
                    --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
                    --tags project=udapeople
            - run:
                name: Add back-end ip to ansible inventory
                command: |
                    aws ec2 describe-instances \
                    --query 'Reservations[*].Instances[*].PublicIpAddress' \
                    --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                    --output text >> .circleci/ansible/inventory.txt
            - persist_to_workspace:
                root: ~/
                paths:
                    - project/.circleci/ansible/inventory.txt
    configure-infrastructure:
        docker:
            - image: python:3.7-alpine3.11
        steps:
            - checkout
            - add_ssh_keys:
                fingerprints: ["19:6b:b6:9c:54:73:b8:6d:e8:b7:49:c0:fe:ba:20:ea"]
            - attach_workspace:
                at: ~/
            - run:
                name: Install dependencies
                command: |
                    apk add --update ansible
            - run:
                name: Configure server
                command: |
                    cat .circleci/ansible/inventory.txt
                    ansible-playbook -i .circleci/ansible/inventory.txt .circleci/ansible/configure-server.yml

workflows:
    default:
        jobs:
            - build-frontend
            - build-backend
            - test-frontend:
                requires: [build-frontend]
            - test-backend:
                requires: [build-backend]
            - scan-frontend:
                requires: [build-frontend]
            - scan-backend:
                requires: [build-backend]
            - deploy-infrastructure:
                requires: [ test-frontend, test-backend, scan-frontend, scan-backend ]
            - configure-infrastructure:
                requires: [ deploy-infrastructure ]